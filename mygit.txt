$ git init	--通过git init命令把这个目录变成Git可以管理的仓库
$ git add readme.txt	--用命令git add告诉Git，把文件添加到仓库
$ git commit -m "wrote a readme file"	--用命令git commit告诉Git，把文件提交到仓库
$ git status	--git status命令可以让我们时刻掌握仓库当前的状态
$ git diff readme.txt 	--git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式

版本控制
$ git log	--我们用git log命令查看历史记录
$ git reset --hard HEAD^ 	--回退到上一个版本（这里的版本全部都是以commit之后为版本节点的）
$ git reset --hard 1094a	--版本指向到指定的hash值得版本上
$ git reflog	--git reflog用来记录你的每一次命令：

工作区：所谓的工作区就是我们可以看到的文件目录
版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
		Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区。
		我们每次add就是讲对应工作区的修改内容提交到暂存区，每次commit都是讲暂存区的内容提交到对应的分支上，这里在初始化的git库的时候默认只有master分支

撤销修改
$ git checkout -- readme.txt	--git checkout -- file可以丢弃工作区的修改（注意是工作区的修改，还未提交到暂存区）
$ git reset HEAD readme.txt	--命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage）（这将会把暂存区所有关于该文件未commit的内容全部撤销掉，返回到工作区，然后就可以使用上一条命令了）

删除文件：在add对应文件之后，在文件夹下降改文件删除了
$ git rm test.txt	--一是确实要从版本库中删除该文件，那就用命令git rm删掉（一般情况不这样，一般情况是再使用一次add将删除的动作提交）
$ git checkout -- test.txt	--另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本，git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
（从来没有被添加到版本库就被删除的文件，是无法恢复的！）

远程仓库
$ git remote add origin git@github.com:1170593173/learngit.git	--把一个已有的本地仓库与远程仓库关联
$ git push -u origin master	--把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程

$ git remote -v 	--git remote -v查看远程库信息

$ git remote rm origin 		--“删除”其实是解除了本地和远程的绑定关系

$ git clone git@github.com:michaelliao/gitskills.git 	--git clone从远程克隆一个本地库


分支管理
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>或者git switch <name>
创建+切换分支：git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


冲突解决：
会出现冲突的情况往往是这样：
用户a从master分支常见dev分之后，进行开发，对文件readme的11行修改了
同样的是用户b直接在master上进行开发，也对readme的11行进行了修改
这时冲突就产生了，在master分支对dev进行merge的时候，需要手动解决readme的11行冲突

分支管理策略
$ git merge dev 	--在当前分支合并dev分支，这样git会智能合并，导致对在dev上的提交信息丢失
$ git merge --no-ff -m "merge with no-ff" dev 	--所以通常使用关闭智能合并，填写对应的信息


bug分支（stash的使用）
1、从master分支创建了dev分支进行功能开发
2、此时dev的功能开发到一半，需要紧急修复下master中的一个bug
3、这是就需要在dev的分支上使用 $ git stash 来对当前的工作区进行一个暂时的保留
4、切回到master分支之后，根据master分支创建对应的bug修复分支
5、在bug修复分支修复完当前bug之后，返回master分支merge bug修复分支
6、然后回到dev分支，使用 $ git cherry-pick 4c805e2，选择刚才修复分支提交的对应的hash值，更新到dev上
7、最后在使用$ git stash list查看当前暂时保存的stash，使用$ git stash pop恢复工作区

多人协作
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
$ git remote	--要查看远程库的信息
$ git remote -v		--显示更详细的信息
